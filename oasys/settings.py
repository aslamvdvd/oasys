"""
Django settings for oasys project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import environ

# Initialize environment
env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=(str, ''),
    DATABASE_URL=(str, 'sqlite:///db.sqlite3'),
    LOGS_PATH=(str, None),
    MEDIA_ROOT_PATH=(str, None),
    STATIC_ROOT_PATH=(str, None),
    TEMPLATE_UPLOAD_PATH=(str, None),
)
environ.Env.read_env()  # Read the .env file


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# File Storage Paths
# These paths can be overridden using environment variables
LOGS_DIR = Path(env('LOGS_PATH')) if env('LOGS_PATH') else BASE_DIR / 'logs'
MEDIA_ROOT = Path(env('MEDIA_ROOT_PATH')) if env('MEDIA_ROOT_PATH') else BASE_DIR / 'media'
STATIC_ROOT = Path(env('STATIC_ROOT_PATH')) if env('STATIC_ROOT_PATH') else BASE_DIR / 'staticfiles'
TEMPLATE_UPLOAD_PATH = Path(env('TEMPLATE_UPLOAD_PATH')) if env('TEMPLATE_UPLOAD_PATH') else BASE_DIR / 'templates_store'

# Create necessary directories with error handling
for directory in [LOGS_DIR, MEDIA_ROOT, STATIC_ROOT, TEMPLATE_UPLOAD_PATH]:
    try:
        directory.mkdir(parents=True, exist_ok=True)
    except Exception as e:
        import sys
        print(f"Warning: Could not create directory {directory}: {e}", file=sys.stderr)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',  # Core app
    'dashboard',  # Dashboard app
    'accounts',  # Accounts app
    'log_service',  # System logging service
    'templator',  # Template management app
    'analyzer',   # Template validation and metadata generation
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'log_service.middleware.AdminActivityMiddleware',  # Admin activity logging
]

ROOT_URLCONF = 'oasys.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'oasys.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    'default': env.db(),  # Automatically parses DATABASE_URL
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = env('STATIC_URL', default='static/')
MEDIA_URL = env('MEDIA_URL', default='media/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# Authentication Backends
AUTHENTICATION_BACKENDS = [
    'accounts.backends.EmailOrUsernameBackend',  # custom backend
    'django.contrib.auth.backends.ModelBackend',  # default backend
]

# Logging Configuration - Show DEBUG messages for analyzer on console
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG', # Show DEBUG level messages for handlers
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO', # Keep Django's own logs at INFO unless needed
            'propagate': True,
        },
        'analyzer': { # Specific logger for our app
            'handlers': ['console'],
            'level': 'DEBUG', # Set the level for the analyzer logger
            'propagate': False, # Don't send analyzer messages to root logger
        },
        'templator': { # Also show INFO for templator to see signal flow
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Add other app loggers here if needed
    },
    # Optional: Configure root logger if needed
    # 'root': {
    #     'handlers': ['console'],
    #     'level': 'WARNING',
    # },
}
